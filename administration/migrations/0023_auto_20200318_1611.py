# Generated by Django 3.0 on 2020-03-18 21:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('administration', '0022_variable_rules'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Text', max_length=255, verbose_name='text')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='blog',
            name='subject',
        ),
        migrations.AddField(
            model_name='blog',
            name='author',
            field=models.ForeignKey(blank=True, help_text='The staff member who wrote the article', limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_blogs', to=settings.AUTH_USER_MODEL, verbose_name='author'),
        ),
        migrations.AddField(
            model_name='blog',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='blog',
            name='summary',
            field=models.TextField(blank=True, help_text='A quick summary of the post', null=True, verbose_name='summary'),
        ),
        migrations.AddField(
            model_name='blog',
            name='title',
            field=models.CharField(default='FIX', help_text='Title of the post', max_length=255, verbose_name='title'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='blog',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Associated tags', related_name='blogs', to='administration.BlogTag', verbose_name='tags'),
        ),
    ]
